services:
  # mlflow:
  #   image: mlflow:latest
  #   container_name: mlflow
  #   ports:
  #     - "5000:5000"
  #   volumes:
  #     - ./mlruns:/mlruns  # Persistent storage for MLflow runs
  #   environment:
  #     - MLFLOW_TRACKING_URI=http://0.0.0.0:5000
  #   networks:
  #     - minio-network


  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: admin123
      MINIO_ROOT_PASSWORD: admin123
    ports:
      - "9000:9000"  # MinIO API
      - "9001:9001"  # MinIO Web Console
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    restart: always
    networks:
      - minio-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    restart: always
    networks:
      - minio-network

  ml-pipeline:
    build:
      context: .
    container_name: ml-pipeline
    environment:
      MINIO_ROOT_USER: admin123
      MINIO_ROOT_PASSWORD: admin123
      MINIO_URL: http://minio:9000
      DVC_BUCKET_NAME: project-mlops
    depends_on:
      - minio
    volumes:
      - .:/app
    command: ["bash", "-c", "dvc pull && python scripts/data_preprocess.py && python scripts/model_train.py && python scripts/model_evaluation.py"]
    networks:
      - minio-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - minio-network
    volumes:
      - grafana_data:/var/lib/grafana

volumes:
  minio_data:
    driver: local
  grafana_data:
    driver: local

networks:
  minio-network:
    driver: bridge

